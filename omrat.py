# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OMRAT
                                 A QGIS plugin
 This is an open source implementation of Pedersens equations from 1995
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-22
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Axel HÃ¶rteborn
        email                : axel.horteborn@ri.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from typing import Any, Callable
from PyQt5.QtWidgets import QToolBar, QMessageBox
from pytest_qgis import QgsMapCanvas
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QMetaType
from qgis.PyQt.QtGui import QIcon, QAction
from qgis.PyQt.QtWidgets import QMenuBar, QWidget
from qgis._core import QgsVectorDataProvider
from qgis.core import (QgsVectorLayer, QgsFeature, QgsGeometry, QgsLineString, QgsPoint, QgsProject, 
                       QgsField, QgsFields)
from qgis.core import QgsPointXY, QgsMessageLog, Qgis

from qgis.gui import QgsMapToolPan, QgisInterface
import gc
import sys
import os
import os.path
sys.path.append('.')
# Initialize Qt resources from file resources.py
from resources import *

# Import the code for the DockWidget
from compute.run_calculations import Calculation
from geometries.handle_qgis_iface import HandleQGISIface
from omrat_utils.causation_factors import CausationFactors
from omrat_utils.handle_ais import AIS
from omrat_utils.handle_settings import DriftSettings
from omrat_utils.handle_traffic import Traffic
from omrat_utils.storage import Storage
from omrat_utils.handle_object import OObject
from omrat_utils.handle_ship_cat import ShipCategories
from omrat_utils.gather_data import GatherData
from omrat_widget import OMRATMainWidget


class OMRAT:
    """QGIS Plugin Implementation."""
    def __init__(self, iface:QgisInterface, testing:bool=False):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.testing = testing
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        if not self.testing:
            # initialize locale
            locale: str = QSettings().value('locale/userLocale')[0:2]
            locale_path: str = os.path.join(
                self.plugin_dir,
                'i18n',
                f'OMRAT_{locale}.qm')

            if os.path.exists(locale_path):
                self.translator: QTranslator = QTranslator()
                self.translator.load(locale_path)
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions: list[Any] = []
        self.menu: str = self.tr(u'&Open Maritime Risk Analysis Tool')
        self.toolbar: QToolBar = self.iface.addToolBar(u'OMRAT')
        self.toolbar.setObjectName(u'OMRAT')

            #print "** INITIALIZING OMRAT"
        self.pluginIsActive = False
        self.segment_id = 0
        self.traffic_data: dict[str, dict[str, dict[str, Any]]] = {}
        self.segment_data: dict[str, Any] = {}
        self.cur_route_id = 1
        self.main_widget = OMRATMainWidget()
        self.qgis_geoms: HandleQGISIface = HandleQGISIface(self)
        self.drift_settings: DriftSettings = DriftSettings(self)
        self.causation_f: CausationFactors = CausationFactors(self)
        self.calc: Calculation | None = Calculation(self)
        self.ship_cat = ShipCategories(self)
        self.ais = AIS(self)
        self.traffic = Traffic(self, self.main_widget)
        self.object = OObject(self)
        self.drift_values = self.drift_settings.drift_values
        self.causation_values = self.causation_f.data

    def tr(self, message:str):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        return QCoreApplication.translate('OMRAT', message)

    def add_action(
        self,
        icon_path:str,
        text:str,
        callback: Callable[[], None],
        enabled_flag:bool=True,
        add_to_menu:bool=True,
        add_to_toolbar:bool=True,
        status_tip:str|None=None,
        whats_this:str|None=None,
        parent:QWidget|None=None) -> QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = self.plugin_dir + '/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Omrat'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------
    
    def show_error_popup(self, message: str, function_name:str) -> None:
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Critical)
        msg_box.setWindowTitle(self.tr(f"Failure in {function_name}"))
        msg_box.setText(self.tr("A failure occurred:"))
        msg_box.setInformativeText(message)
        msg_box.exec()

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin main_widget is closed"""

        # Disconnect signals
        if self.main_widget.is_active:
            self.main_widget.pbAddRoute.clicked.disconnect()
            self.main_widget.pbStopRoute.clicked.disconnect()
            self.main_widget.pbLoadRoute.clicked.disconnect()
            self.main_widget.pbRemoveRoute.clicked.disconnect()
            self.main_widget.pbUpdateAIS.clicked.disconnect()
            self.main_widget.pbEditTrafficData.clicked.disconnect()
            self.main_widget.pbAddSimpleDepth.clicked.disconnect()
            self.main_widget.pbLoadDepth.clicked.disconnect()
            self.main_widget.pbRemoveDepth.clicked.disconnect()
            self.main_widget.pbAddSimpleObject.clicked.disconnect()
            self.main_widget.pbLoadObject.clicked.disconnect()
            self.main_widget.pbRemoveObject.clicked.disconnect()
            self.main_widget.pbRunModel.clicked.disconnect()

        # Set plugin state to inactive
        self.pluginIsActive = False
        self.main_widget.is_active = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        # Call the unload method of Traffic
        self.traffic.unload()

        # Call the unload method of AIS
        self.ais.unload()
        
        # Unload geometries
        self.object.unload()
        self.qgis_geoms.unload()

        # Remove actions from menu and toolbar
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Open Maritime Risk Analysis Tool'),
                action)
            self.iface.removeToolBarIcon(action)

        # Remove the toolbar
        if hasattr(self, 'toolbar'):
            del self.toolbar    

        # Disconnect signals and clean up dock widget
        try:
            self.onClosePlugin()
        except Exception as e:
            print(f"Error during onClosePlugin: {e}")
        # Disconnect cbTrafficSelectSeg signal
        try:
            self.main_widget.cbTrafficSelectSeg.currentIndexChanged.disconnect()
            print("Disconnected cbTrafficSelectSeg.currentIndexChanged")
        except TypeError:
            print("No connection for cbTrafficSelectSeg.currentIndexChanged")
        self.main_widget.deleteLater()
        gc.collect()
        for folder in ['omrat_utils', 'compute', 'geometries.get_drifting_overlap', 'geometries.route', 
                       'geometries.handle_qgis_iface']:
            to_remove = [m for m in sys.modules if m.startswith(folder)]
            for m in to_remove:
                print(m)
                del sys.modules[m]
        QgsMessageLog.logMessage("Plugin unloaded", "OMRAT", Qgis.Info)
        
    def point4326_from_wkt(self, coord_str:str, crs:str) -> QgsPoint:
        coords_str: list[str] = coord_str.split(' ')
        coords: list[float] = [float(coord) for coord in coords_str]
        q_point = QgsPoint(coords[0], coords[1])
        return q_point
        
    def load_lines(self, data:dict[str, dict[str, Any]]) -> None:
        self.segment_id = 0
        crs = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        for _, seg_data in data["segment_data"].items():
            name = f"Segment {seg_data['Route Id']} - {seg_data['Segment Id']}"
            vl = QgsVectorLayer(f"LineString?crs=EPSG:4326", name, "memory")
            QgsProject.instance().addMapLayer(vl)
            
            self.segment_id += 1
            if not vl.isEditable():
                vl.startEditing()
            fields = QgsFields()
            fields.append(QgsField("segmentId", QMetaType.Int))
            fields.append(QgsField("routeId", QMetaType.Int))
            fields.append(QgsField("startPoint", QMetaType.QString))
            fields.append(QgsField("endPoint", QMetaType.QString))
            fields.append(QgsField("label", QMetaType.QString)) 
            provider: QgsVectorDataProvider | None = vl.dataProvider()
            if provider is None:
                return
            provider.addAttributes(fields.toList())
            vl.updateFields()

            # Create feature
            fet = QgsFeature(fields)
            start = self.point4326_from_wkt(seg_data["Start Point"], crs)
            end = self.point4326_from_wkt(seg_data["End Point"], crs)
            fet.setGeometry(QgsLineString([start, end]))
            fet.setAttributes([seg_data["Segment Id"], seg_data["Route Id"], seg_data["Start Point"], 
                               seg_data["End Point"], f"LEG_{seg_data['Segment Id']}_{seg_data['Route Id']}"])
            if self.qgis_geoms is not None:
                self.qgis_geoms.style_layer(vl)
                fet.setId(1)
                provider.addFeature(fet)
                self.qgis_geoms.label_layer(vl)
                vl.updateExtents()
            
            # Validate geometry
            if not fet.geometry().isGeosValid():
                print(f"Invalid geometry for segment {seg_data['Segment Id']}")
                continue

            # Commit changes and refresh
            vl.commitChanges()
            vl.triggerRepaint()

        # Refresh map canvas
        self.iface.mapCanvas().refresh()    

    def reset_route_table(self) -> None:
        if self.main_widget is not None:
            self.main_widget.twRouteList.setColumnCount(5)
            self.main_widget.twRouteList.setHorizontalHeaderLabels(['Segment Id', 'Route Id', 
                                                                'Start Point', 'End Point', 'Width'])
            self.main_widget.twRouteList.setColumnWidth(1, 75)
            self.main_widget.twRouteList.setColumnWidth(2, 125)
            self.main_widget.twRouteList.setColumnWidth(3, 125)
            self.main_widget.twRouteList.setColumnWidth(4, 75)
            self.main_widget.twRouteList.setRowCount(0)
    
    def show_traffic_widget(self) -> None:
        self.traffic.traffic_data = self.traffic_data
        self.traffic.fill_cbTrafficSelectSeg()
        self.traffic.update_direction_select()
        self.traffic.run()
        
    def save_work(self):
        store = Storage(self)
        store.store_all()

    def load_work(self):
        store = Storage(self)
        store.load_all()
               
    def run_calculation(self):
        gd = GatherData(self)
        data = gd.get_all_for_save()
        if self.calc is not None:
            self.calc.run_drift_visualization(data)
        #self.calc.run_model()
        
    def open_drift(self):
        self.drift_settings.run()
    
    def stop_route(self):
        """Stop the current route, commit changes, and set the active tool to 'Pan Map'."""
        # Disable the "Stop Route" button
        self.main_widget.pbStopRoute.setEnabled(False)

        for layer in self.qgis_geoms.vector_layers:
            if layer.isEditable():
                layer.commitChanges()  # Save changes
            layer.triggerRepaint()  # Ensure the layer is refreshed

        # Clear the current start point and increment the route ID
        self.cur_route_id += 1

        # Set the active tool to "Pan Map"
        canvas: QgsMapCanvas | None = self.iface.mapCanvas()
        map_tool_pan = QgsMapToolPan(canvas)
        if canvas is not None:
            canvas.setMapTool(map_tool_pan)
        actionPan: QAction | None = self.iface.actionPan()
        if actionPan is not None:
            actionPan.trigger()
        
    def ais_settings(self) -> None:
        self.ais.run()
        
    def update_ais(self) -> None:
        self.ais.update_legs()
        self.main_widget.cbTrafficSelectSeg.setEnabled(True)
    
    def remove_route(self)-> None:
        # To implement
        pass
    
    def load_route(self)-> None:
        # To implement
        pass
    
    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True
            self.main_widget.pbAddRoute.clicked.connect(self.qgis_geoms.add_new_route)
            self.main_widget.pbStopRoute.clicked.connect(self.stop_route)
            self.main_widget.pbRemoveRoute.clicked.connect(self.remove_route)
            self.main_widget.pbLoadRoute.clicked.connect(self.load_route)
            self.main_widget.pbUpdateAIS.clicked.connect(self.update_ais)
            self.main_widget.pbEditTrafficData.clicked.connect(self.show_traffic_widget)
            
            menubar = QMenuBar(self.main_widget)
            menubar.setMinimumSize(320,20)

            fileMenu = menubar.addMenu('File')
            SettingMenu = menubar.addMenu('Settings')
            analyse_sen_Menu = menubar.addMenu('Analyse sensitivity')
            HelpMenu = menubar.addMenu('Help')
            
            # mnuSub1 = viewMenu.addMenu('Sub-menu')
            fileMenu.addAction("Save", self.save_work)
            fileMenu.addAction("Load", self.load_work)
            SettingMenu.addAction("Drift settings", self.open_drift)
            SettingMenu.addAction("AIS connection settings", self.ais_settings)
            #self.main_widget.actionSave_project.clicked.connect(self.save_work)
            #self.main_widget.actionOpen_project.clicked.connect(self.load_work)
            self.main_widget.cbTrafficSelectSeg.currentIndexChanged.connect(self.traffic.change_dist_segment)
            self.main_widget.pbAddSimpleDepth.clicked.connect(self.object.add_simple_depth)
            self.main_widget.pbLoadDepth.clicked.connect(self.object.load_depths)
            self.main_widget.pbRemoveDepth.clicked.connect(self.object.remove_depth)
            self.main_widget.pbAddSimpleObject.clicked.connect(self.object.add_simple_object)
            self.main_widget.pbLoadObject.clicked.connect(self.object.load_objects)
            self.main_widget.pbRemoveObject.clicked.connect(self.object.remove_object)
            self.main_widget.pbRunModel.clicked.connect(self.run_calculation)
            
            self.reset_route_table()
            self.main_widget.show()
